// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id            Int      @id @default(autoincrement())
  discordId     String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  discordTag    String
  avatar        String
  discriminator String
  Guilds        Guilds[]
}

model Guilds {
  id                Int                 @id @default(autoincrement())
  guildId           String              @unique
  guildName         String              @db.LongText
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  levels            Boolean             @default(false)
  user              Users               @relation(fields: [invitedBy], references: [discordId])
  invitedBy         String
  logChannel        String?
  muteRole          String?
  Banned_users      Banned_users[]
  staffMembers      staffMembers[]
  warnedUsers       warnedUsers[]
  muted_users       muted_users[]
  Temp_Banned_users Temp_Banned_users[]
  GuildMemberLevels GuildMemberLevels[]
}

model Banned_users {
  id         Int          @id @default(autoincrement())
  discordId  String
  discordTag String
  guildId    String
  guild      Guilds       @relation(fields: [guildId], references: [guildId])
  reason     String?      @db.LongText
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  bannedBy   Int
  staff      staffMembers @relation(fields: [bannedBy], references: [id])
}

model Temp_Banned_users {
  id        Int          @id @default(autoincrement())
  discordId String
  guildId   String
  guild     Guilds       @relation(fields: [guildId], references: [guildId])
  duration  String
  reason    String?      @db.LongText
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  bannedBy  Int
  staff     staffMembers @relation(fields: [bannedBy], references: [id])
  Members   Members?     @relation(fields: [membersId], references: [id])
  membersId Int?
}

model muted_users {
  id        Int          @id @default(autoincrement())
  discordId String
  guildId   String
  guild     Guilds       @relation(fields: [guildId], references: [guildId])
  reason    String?      @db.LongText
  duration  String?
  roles     String       @db.LongText
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  mutedBy   Int
  staff     staffMembers @relation(fields: [mutedBy], references: [id])
  Members   Members?     @relation(fields: [membersId], references: [id])
  membersId Int?
}

model Members {
  id                Int                 @id @default(autoincrement())
  discordId         String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  discordTag        String
  discriminator     String
  Temp_Banned_users Temp_Banned_users[]
  muted_users       muted_users[]
  staffMembers      staffMembers[]
  warnedUsers       warnedUsers[]
  GuildMemberLevels GuildMemberLevels[]
}

model staffMembers {
  id                Int                 @id @default(autoincrement())
  discordId         String
  guildId           String
  active            Boolean             @default(true)
  guild             Guilds              @relation(fields: [guildId], references: [guildId])
  promotedBy        String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Temp_Banned_users Temp_Banned_users[]
  muted_users       muted_users[]
  Banned_users      Banned_users[]
  Members           Members?            @relation(fields: [membersId], references: [id])
  membersId         Int?
  warnedUsers       warnedUsers[]
}

model warnedUsers {
  id        Int          @id @default(autoincrement())
  discordId String
  warnid    String
  warningby Int
  user      staffMembers @relation(fields: [warningby], references: [id])
  guildId   String
  guild     Guilds       @relation(fields: [guildId], references: [guildId])
  reason    String?      @db.LongText
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  Members   Members?     @relation(fields: [membersId], references: [id])
  membersId Int?
}

model GuildMemberLevels {
  id         Int     @id @default(autoincrement())
  discordId  String
  member     Members @relation(fields: [discordId], references: [discordId])
  guildId    String
  guild      Guilds  @relation(fields: [guildId], references: [guildId])
  level      Int     @default(1)
  exp        Int     @default(0)
  requiredXp Int     @default(100)
}
